Aula de Ponteiros
new <-> delete
new[]<->delete[]
Sempre inserir uma alternativa de construtor padrão ou equivalente

#include<iostream>

class Vetor2d{
private:
    int x; // como não foi definido se é private ou public ele considera que é privado
public:
    Vetor2d(){
        std::cout << "Construtor padrao\n";
        x = y = 0;
    }
    Vetor2d(int  x_,int y_){
        std::cout<< "Construtor com argumentos \n";
          x = x_; y = y_;
    }
    
    ~Vetor2d(){
        std::cout << "Comando Destrutor";
    }
    
    void setX(x_){
        x = x_;
    }
    int getX(void){
        return x;
    }
};

int main(){
    Vetor2d *v1, *v2, *v3;

    v1 = new Vetor2d; // Ativa construtor padrao
    v2 = new Vetor2d(3,4); // Ativa construtor argumentos
    v3 = new Vetor2d[3]; // Ativa construtor padrao, pq é o que permite
    v3[1].setX(4);

    delete v1;
    delete v2;
    delete [] v3;

    int *x;
    x = new int;
    *x = 3;
    std::cout << "*x =" << *x << std::endl;
    delete x;

    int *x, n=10;
    x = new int[n];
    x[2] = 3;
    delete [] x;

    /*Vetor2d v, *v1;
    v1 = &v;
    v1 -> setX(3);
    std::cout << v1->get(x) <<std::endl;
    return 0;*/
}
